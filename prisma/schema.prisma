generator client {
  provider = "prisma-client-js"
   previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  relationMode = "prisma"
}

model User {
  name  String
  id    String @id @unique //matches kinde user id
  email String @unique
  role  String @default("user")

  File    File[]
  Message Message[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model File {
  id   String @id @default(cuid())
  name String

  uploadStatus UploadStatus @default(PENDING)

  url String
  key String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  User      User?     @relation(fields: [userId], references: [id])
  userId    String?
  Message   Message[]
}

model Message {
  id   String @id @default(cuid())
  text String @db.Text()

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isUserMessage Boolean

  User   User?  @relation(fields: [userId], references: [id])
  userId String
  File   File?  @relation(fields: [fileId], references: [id])
  fileId String
}

model FAQs {
  id        String   @id @default(cuid())
  question  String   @db.VarChar(1000)
  answer    String   @db.VarChar(4000)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String
  message   String
  createdAt DateTime @default(now())
}

enum TakeAction {
  PENDING
  ONGOING
  COMPLETED
}

model Feedback {
  id         String     @id @default(cuid())
  message    String
  createdAt  DateTime   @default(now())
  takeAction TakeAction @default(PENDING)
}
