//datasource db {
//  provider     = "mysql"
//  url          = env("DATABASE_URL")
//  relationMode = "prisma"
//}

//generator client {
//  provider = "prisma-client-js"
//}

//model User {
//  id    String @id @unique
//  email String @unique

//  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
//  stripeSubscriptionID   String?   @unique @map(name: "stripe_subscription_id")
//  stripePriceId          String?   @unique @map(name: "stripe_price_id")
//  stripeCurrentPerionEnd DateTime? @map(name: "stripe_current_perion_end")
//}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id    String @id @unique //matches kinde user id
  email String @unique
  user  String @default("user")

  File    File[]
  Message Message[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model File {
  id   String @id @default(cuid())
  name String

  uploadStatus UploadStatus @default(PENDING)

  url String
  key String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  User      User?     @relation(fields: [userId], references: [id])
  userId    String?
  Message   Message[]
}

model Message {
  id   String @id @default(cuid())
  text String @db.Text()

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isUserMessage Boolean

  User   User?  @relation(fields: [userId], references: [id])
  userId String
  File   File?  @relation(fields: [fileId], references: [id])
  fileId String
}
